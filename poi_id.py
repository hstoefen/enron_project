#!/usr/bin/python

#import sys
import pickle
import my_tools
#sys.path.append("../ud120-projects/tools/")

from feature_format import featureFormat, targetFeatureSplit
from sklearn.cross_validation import train_test_split
from tester import test_classifier, dump_classifier_and_data

### Load the dictionary containing the dataset
with open("final_project_dataset.pkl", "r") as data_file:
    data_dict = pickle.load(data_file)

### Task 1: Select what features you'll use.
### features_list is a list of strings, each of which is a feature name.
### The first feature must be "poi".

feature_stats = my_tools.feature_stats(data_dict)
features_list = ['poi'] + list(feature_stats.index)

### Task 2: Remove outliers
# only one outlier needs to be removed like in the course material for the total of all available financial data entries
del data_dict['TOTAL']

### Task 3: Create new feature(s)
data_dict = my_tools.new_feature(data_dict)

feature_stats = my_tools.feature_stats(data_dict) # stats and feature list need to be rebuilt in order to incorporate the new feature
features_list = ['poi'] + list(feature_stats.index)

# reduce number of features due to low availability
# please refer to the iPython Notebook for the rationale of using 64 as the limit
feature_availability_low = feature_stats[feature_stats['available_no'] < 64]
for feature in feature_availability_low.index:
    features_list.remove(feature)
    
# use SelectKBest to order features according to their importance
best_features = my_tools.best_features(data_dict, features_list)
features_list = ['poi'] + list(best_features.index)

### Task 4: Try a varity of classifiers
### Please name your classifier clf for easy export below.
### Note that if you want to do PCA or other multi-stage operations,
### you'll need to use Pipelines. For more info:
### http://scikit-learn.org/stable/modules/pipeline.html

# Provided to give you a starting point. Try a variety of classifiers.
if 1:
    from sklearn.naive_bayes import GaussianNB
    clf = GaussianNB()
    
if 0:
    from sklearn.tree import DecisionTreeClassifier
    clf = DecisionTreeClassifier()
    
if 0:
    from sklearn.svm import SVC
    clf = SVC(kernel='rbf',C=20,random_state=42)
    data_dict = my_tools.rescale_data_dict(data_dict, features_list)
    
if 0:
    from sklearn.neighbors import KNeighborsClassifier
    clf = KNeighborsClassifier(n_neighbors=3, algorithm='auto')
    data_dict = my_tools.rescale_data_dict(data_dict, features_list)    

### Store to my_dataset for easy export below.
my_dataset = data_dict

### Task 5: Tune your classifier to achieve better than .3 precision and recall 
### using our testing script. Check the tester.py script in the final project
### folder for details on the evaluation method, especially the test_classifier
### function. Because of the small size of the dataset, the script uses
### stratified shuffle split cross validation. For more info: 
### http://scikit-learn.org/stable/modules/generated/sklearn.cross_validation.StratifiedShuffleSplit.html

# Example starting point. Try investigating other evaluation techniques!
#from sklearn.cross_validation import train_test_split
#features_train, features_test, labels_train, labels_test = \
#    train_test_split(features, labels, test_size=0.3, random_state=42)

# here the number of features k is tuned, adding features from the results 
# generated by SelectKBest, beginning with the features having the highest score

#from time import time
#t0 = time()
#scores, features = my_tools.tune_k(data_dict, features_list, clf)
#
#print clf
#print scores
#print features[0]
#print "execution time:", round(time()-t0, 3), "s"

# final execution of GaussianNB using the top three features
### Extract features and labels from dataset for local testing
features_list = features_list[:4]
data = featureFormat(my_dataset, features_list, sort_keys = True)
labels, features = targetFeatureSplit(data)

train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size=None, random_state = 42)

clf = clf.fit(train_features, train_labels)

### Task 6: Dump your classifier, dataset, and features_list so anyone can
### check your results. You do not need to change anything below, but make sure
### that the version of poi_id.py that you submit can be run on its own and
### generates the necessary .pkl files for validating your results.

dump_classifier_and_data(clf, my_dataset, features_list)